name: CI

on:
  push:
    tags:
      - "CI-*"
    
  pull_request:
    branches:
      - main

env:
  # Change the pyproject and cargo too if changing this
  PY_VERSION: "3.9"

defaults:
  run:
    shell: bash

jobs:
  # Quick CI on MacOS, Windows and Ubuntu
  CI:
    runs-on: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Maturin build
        run: |
          maturin build --release --out dist
          pip install dist/*
          
      - name: Run test and formatting
        run: |
          shopt -s globstar
          pytest
          ruff check . && ruff format --diff
          rustfmt --check src/**/*.rs
  
  # Builds run if the CI is successful

  # Linux Build, covers x86_64, i686, aarch64 and armv7 (Rust target names)
  # Python arch tag names: x86_64, i686, aarch64 and armv7l
  Linux-Build:
    runs-on: ubuntu-latest
    needs: CI
    strategy:
      matrix:
        platform:
          - target: x86_64
          - target: i686
          - target: aarch64
          - target: armv7 
    name: Wheel Build - Manylinux - ${{ matrix.platform.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: Update apt
        run: | 
          sudo apt update

      - name: Install cross-compile tools for i686
        if: matrix.platform.target == 'i686'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt install -y gcc-multilib g++-multilib libc6-dev-i386

      - name: Install cross-compile tools for aarch64
        if: matrix.platform.target == 'aarch64'
        run: |
          sudo dpkg --add-architecture aarch64 
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install cross-compile tools for armv7
        if: matrix.platform.target == 'armv7'
        run: |
          sudo dpkg --add-architecture armhf
          sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Maturin build
        # armv7 target is "armv7-unknown-linux-gnueabihf"
        run: |
          if [ "${{ matrix.platform.target }}" == "armv7" ]; then
            rustup target add ${{ matrix.platform.target }}-unknown-linux-gnueabihf
            maturin build --release --out dist --target ${{ matrix.platform.target }}-unknown-linux-gnueabihf
          else
            rustup target add ${{ matrix.platform.target }}-unknown-linux-gnu
            maturin build --release --out dist --target ${{ matrix.platform.target }}-unknown-linux-gnu
          fi

      - name: Upload wheels
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-manylinux-${{ matrix.platform.target }}
          path: dist/cryptopyx-*.whl

  # Windows Build, covers x86_64 and x64
  Windows-Build:
    runs-on: windows-latest
    needs: CI
    strategy:
      matrix:
        platform:
          - target: x86_64
          - target: i686
    name: Wheel Build - Windows - ${{ matrix.platform.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          maturin build --release --out dist --target ${{ matrix.platform.target }}-pc-windows-msvc

      - name: Upload wheels
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist/*.whl

  # MacOS Build, covers x86_64 (Intel) and aarch64 (Apple Silicon)
  MacOS-Build:
    runs-on: ${{ matrix.platform.runner }}
    needs: CI
    strategy:
      matrix:
        platform:
          # No need for cross-compilation here as GitHub provides both x86_64 and aarch64 runners
          - runner: macos-15-intel
            target: x86_64
          - runner: macos-14
            target: arm64
    name: Wheel Build - MacOS - ${{ matrix.platform.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          maturin build --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist/*.whl

  # sdist build for other
  sdist-Build:
    runs-on: ubuntu-latest
    needs: CI
    name: Wheel Build - sdist
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          maturin build --release --sdist --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-sdist
          path: dist/*.tar.gz
