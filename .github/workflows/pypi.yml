name: Publish to PyPI

on:
  release:
    types: [published]

env:
  # Change the pyproject and cargo too if changing this
  PY_VERSION: "3.9"
  GH_REPO: syan212/cryptopyx
  GH_TOKEN: ${{ github.token }}
  GH_branch: main

jobs:
  # Linux Build, covers x86_64, i686, aarch64 and armv7 (Rust target names)
  # Python arch tag names: x86_64, i686, aarch64 and armv7l
  Linux-Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686, aarch64, armv7]
    name: Wheel build - manylinux - ${{ matrix.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: Update apt
        run: | 
          sudo apt update

      - name: Install cross-compile tools for i686
        if: matrix.target == 'i686'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt install -y gcc-multilib g++-multilib libc6-dev-i386

      - name: Install cross-compile tools for aarch64
        if: matrix.target == 'aarch64'
        run: |
          sudo dpkg --add-architecture aarch64 
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install cross-compile tools for armv7
        if: matrix.target == 'armv7'
        run: |
          sudo dpkg --add-architecture armhf
          sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Maturin build
        # armv7 target is "armv7-unknown-linux-gnueabihf"
        run: |
          if [ "${{ matrix.target }}" == "armv7" ]; then
            rustup target add ${{ matrix.target }}-unknown-linux-gnueabihf
            maturin build --release --out dist --target ${{ matrix.target }}-unknown-linux-gnueabihf
          else
            rustup target add ${{ matrix.target }}-unknown-linux-gnu
            maturin build --release --out dist --target ${{ matrix.target }}-unknown-linux-gnu
          fi

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-manylinux-${{ matrix.target }}
          path: dist/cryptopyx-*.whl

  # Windows Build, covers x86_64 and x64
  Windows-Build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          # For windows we need to specify the arch to cross compile
          - target: x86_64
            arch: x64
          - target: i686
            arch: x86
    name: Wheel build - windows - ${{ matrix.platform.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
            # For windows the arch needs to be specified
            # Specifically for x64
            architecture: ${{ matrix.platform.arch }}
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          rustup target add ${{ matrix.platform.target }}-pc-windows-msvc
          maturin build --release --out dist --target ${{ matrix.platform.target }}-pc-windows-msvc

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist/*.whl

  # MacOS Build, covers x86_64 (Intel) and aarch64 (Apple Silicon)
  MacOS-Build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # No need for cross-compilation here as GitHub provides both x86_64 and aarch64 runners
          - runner: macos-15-intel
            target: x86_64
          - runner: macos-14
            target: arm64
    name: Wheel build - macos - ${{ matrix.platform.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1
        with:
          components: rustfmt
        
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          maturin build --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist/*.whl

  # sdist build for other
  sdist-Build:
    runs-on: ubuntu-latest
    name: Wheel Build - sdist
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
            python-version: ${{ env.PY_VERSION }}
            cache: pip
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1
        with:
          components: rustfmt

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Maturin build
        run: |
          maturin build --release --sdist --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-sdist
          path: dist/*.tar.gz

  # Publish to PyPI via the pypa/gh-action-pypi-publish action
  publish-to-pypi:
    name: Publish Python distribution to PyPI
    runs-on: ubuntu-latest
    needs: [Linux-Build, Windows-Build, MacOS-Build, sdist-Build]
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download All Wheels
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          # Download all the wheels to the same folder
          path: dist
          merge-multiple: true

      - name: Upload Wheels to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e #v1